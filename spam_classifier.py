# -*- coding: utf-8 -*-
"""Spam Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RL4qbA7ycU1z1Tk__A8SqI8mtgM7ac6n
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.feature_selection import SelectKBest
# %matplotlib inline

"""DATA CLEANING USING PANDAS"""

kk=pd.read_csv("/content/spam.tsv.txt",sep='\t',names=['Category','Email Content']) #reading the file
kk.head(10)

kdetails=kk.info()

kk.describe()

kk["Mail Length"]=kk["Email Content"].apply(len)
kk.head(10)

k_count=kk.groupby("Category").count()
k_count

kk["Mail Length"].describe()

longest_mail=kk[kk["Mail Length"]==910]["Email Content"].iloc[0]
longest_mail

k_values=kk["Category"].values
k_values

kk.loc[kk["Category"]=="spam","Category"]=1
kk.loc[kk["Category"]=="ham","Category"]=0

kk["Category"].values

import string
def cleanising1(s):
  npp=list(i for i in s if(i not in string.punctuation))
  npp="".join(npp)
  return npp

kk["Email Content"]=kk["Email Content"].apply(cleanising1)
#kk["Email Content"]

"""MAIN PART(TRAINING USING SCIKITLEARN)"""

cv=CountVectorizer(stop_words="english")

xTrain=kk["Email Content"].values
yTrain=kk["Category"].values
x_Train,x_Test,y_Train,y_Test=train_test_split(xTrain,yTrain,test_size=0.15)
x_Train_CV=cv.fit_transform(x_Train)
#y_Test

nb=MultinomialNB()
y_Train=y_Train.astype("int") #Really Important Step
nb.fit(x_Train_CV,y_Train)

x_Test_CV=cv.transform(x_Test)
x_Test_CV

predictions=nb.predict(x_Train_CV)
accuracy1=accuracy_score(y_Train,predictions)*100
'''c=0
for i in range(0,len(predictions)):
  if(predictions[i] == y_Train[i]):
    c+=1
accuracy1=c/len(predictions)
#print("The Accuracy on Test Set is "+str(accuracy1*100))'''
print("The Accuracy on Training Set is "+str(accuracy1))

predictions=nb.predict(x_Test_CV)
y_Test.shape==predictions.shape
#predictions

c=0
#accuracy2=accuracy_score(y_Test,predictions)*100
for i in range(0,len(predictions)):
  if(predictions[i] == y_Test[i]):
    c+=1
accuracy2=c/len(predictions)
print("The Accuracy on Test Set is "+str(accuracy2*100))

"""Application Module"""

input_mail=input("Enter the Mail Content \n")
input_CV=cv.transform([input_mail])
pp=nb.predict(input_CV)
if(pp[0] == 1):
  print("It is a Spam Email")
else:
  print("Its not Spam")

